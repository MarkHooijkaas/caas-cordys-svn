//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.06.21 at 10:05:41 AM CEST 
//


package org.kisst.caas._2_0.template;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ServiceContainerStrategy.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ServiceContainerStrategy">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="single"/>
 *     &lt;enumeration value="cloning"/>
 *     &lt;enumeration value="custom"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ServiceContainerStrategy")
@XmlEnum
public enum ServiceContainerStrategy {


    /**
     * There will be only 1 service container created with the given name. If it is installed on a cluster it
     *             will look at the machine name to create that service container on the given machine. The machine name is considered to
     *             be a logical name (as mapped in the caas.conf). If no mapping is found it tries to see if there is a node that has the
     *             given name. This is the default strategy.
     *           
     * 
     */
    @XmlEnumValue("single")
    SINGLE("single"),

    /**
     * This strategy will configure a service container on each and every node that is available in the cluster. The value of the 'machine' attribute will be ignored. 
     * This strategy can have the following parameters:
     * - containers.per.node: Indicates how many service containers should be created on each node. Note that if you put this value to 2 and you run this on a single node machine then there will be 2 service containers on that single node.
     * - naming.pattern: Holds the naming pattern that should be used for the containers. Default is '${NAME} ${SEQUENCE}' which means it takes the name of the container as mentioned in the template file and it adds the sequence number of the node. Example: the container is called BPM and you have 4 nodes they will be called 'BPM 1', 'BPM 2', 'BPM 3' and 'BPM 4'
     * 
     */
    @XmlEnumValue("cloning")
    CLONING("cloning"),

    /**
     * Indicates a custom strategy is used. You can provide a Java class implementing org.kisst.cordys.caas.cm.strategy.ICustomStrategy to determine your own logic for creating service containers
     * 
     */
    @XmlEnumValue("custom")
    CUSTOM("custom");
    private final String value;

    ServiceContainerStrategy(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ServiceContainerStrategy fromValue(String v) {
        for (ServiceContainerStrategy c: ServiceContainerStrategy.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
